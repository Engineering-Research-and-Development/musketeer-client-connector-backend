version: '3'

networks:
  app-tier:
    driver: bridge

services:

  connector-client-backend:
    image: gitlab.alidalab.it:5000/musketeer/connector-client-backend/httpcm/be:1.0.1
    ports:
      - "5000:5000"
    volumes:
      - client_connector_data:/input_data/
      - client_connector_logs:/results/logs/
      - client_connector_results:/results/
      - client_connector_libraries:/usr/local/lib/python3.6/site-packages
      - client_connector_configs:/configs/
    networks:
      - app-tier
    restart: on-failure
    depends_on:
      - mongodb
    links:
      - mongodb

  connector-client-frontend:
    image: gitlab.alidalab.it:5000/musketeer/ngx-musketeer-client:1.2.1
    ports:
      - "4500:80"
    networks:
      - app-tier

  mongodb:
    image: docker.io/bitnami/mongodb:4.4
    ports:
      - "27017:27017"
    volumes:
      - 'mongodb_data:/bitnami/mongodb'
    environment:
      - MONGODB_USERNAME=my_user
      - MONGODB_PASSWORD=password123
      - MONGODB_DATABASE=my_database
    networks:
      - app-tier

  connector-client-ecc:
    image: rdlabengpa/ids_execution_core_container:v1.8.4
    ports:
      - "${CONSUMER_PORT}:${INTERNAL_REST_PORT}"  #Port for exposing HTTP endpoints
      - 8890:8889  #Exposed port for receiving data from another connector (REST)
      - 8087:8086  #Exposed port for receiving data from another connector (WS)
    environment:
      - "SPRING_PROFILES_ACTIVE=docker"
      - DATA_APP_ENDPOINT=${CONSUMER_DATA_APP_ENDPOINT}    #Data APP enpoint for consuming received data
      - MULTIPART_EDGE=${CONSUMER_MULTIPART_EDGE}          #Data APP endpoint multipart/mixed content type
      - MULTIPART_ECC=${MULTIPART_ECC}
      - REST_ENABLE_HTTPS=${REST_ENABLE_HTTPS}
      - IDSCP2=${IDSCP2}
      - WS_EDGE=${CONSUMER_WS_EDGE}
      - WS_ECC=${WS_ECC}
      - CLEARING_HOUSE=${CLEARING_HOUSE}
      - UC_DATAAPP_URI=${CONSUMER_UC_DATAAPP_URI}
      - PUBLIC_PORT=${CONSUMER_PORT}
      - BROKER_URL=${BROKER_URL}
      - DISABLE_SSL_VALIDATION=${DISABLE_SSL_VALIDATION}
      - CACHE_TOKEN=${CACHE_TOKEN}
      - FETCH_TOKEN_ON_STARTUP=${FETCH_TOKEN_ON_STARTUP}
      - SERVER_SSL_ENABLED=${SERVER_SSL_ENABLED}
      - KEYSTORE_NAME=${KEYSTORE_NAME}
      - KEY_PASSWORD=${KEY_PASSWORD}
      - KEYSTORE_PASSWORD=${KEYSTORE_PASSWORD}
      - ALIAS=${ALIAS}
      - DAPS_KEYSTORE_NAME=${DAPS_KEYSTORE_NAME}
      - DAPS_KEYSTORE_PASSWORD=${DAPS_KEYSTORE_PASSWORD}
      - DAPS_KEYSTORE_ALIAS=${DAPS_KEYSTORE_ALIAS}
      - TRUSTORE_NAME=${TRUSTORE_NAME}
      - TRUSTORE_PASSWORD=${TRUSTORE_PASSWORD}
      - TZ=Europe/Rome
    volumes:
      - ./ecc_resources_consumer:/config
      - ./ecc_cert:/cert
    extra_hosts:
      - "ecc-provider:172.17.0.1"
    networks:
      - app-tier

  connector-client-uc:
    image: rdlabengpa/ids_uc_data_app:v0.0.2
    environment:
      - TZ=Europe/Rome
    ports:
      - "9553:9555"
      - "8044:43"
    networks:
      - app-tier

  connector-client-dataapp:
    image: gitlab.alidalab.it:5000/alida/true-connector-data-app/musketeer:1.0.0
    environment:
      - "SPRING_PROFILES_ACTIVE=docker"
      - DATA_APP_MULTIPART=${CONSUMER_MULTIPART_EDGE}
      - SERVER_SSL_ENABLED=${SERVER_SSL_ENABLED}
      - KEYSTORE_NAME=${KEYSTORE_NAME}
      - KEY_PASSWORD=${KEY_PASSWORD}
      - KEYSTORE_PASSWORD=${KEYSTORE_PASSWORD}
      - ALIAS=${ALIAS}
      - TZ=Europe/Rome
    ports:
      - "8084:8083"
      - "9001:9000"
    volumes:
      - ./be-dataapp_resources:/config
      - ./be-dataapp_data_sender:/data
      - ./ecc_cert:/cert
    networks:
      - app-tier

  ecc-provider:
    image: rdlabengpa/ids_execution_core_container:v1.8.4
    ports:
      - "${PROVIDER_PORT}:${INTERNAL_REST_PORT}"  #Port for exposing HTTP endpoints
      - 8889:8889  #Exposed port for receiving data from another connector (REST)
      - 8086:8086  #Exposed port for receiving data from another connector (WS)
    environment:
      - "SPRING_PROFILES_ACTIVE=docker"
      - DATA_APP_ENDPOINT=${PROVIDER_DATA_APP_ENDPOINT}      #Data APP enpoint for consuming received data
      - MULTIPART_EDGE=${PROVIDER_MULTIPART_EDGE}                      #Data APP endpoint multipart/mixed content type
      - MULTIPART_ECC=${MULTIPART_ECC}
      - REST_ENABLE_HTTPS=${REST_ENABLE_HTTPS}
      - IDSCP2=${IDSCP2}
      - WS_EDGE=${PROVIDER_WS_EDGE}
      - WS_ECC=${WS_ECC}
      - UC_DATAAPP_URI=${PROVIDER_UC_DATAAPP_URI}
      - CLEARING_HOUSE=${CLEARING_HOUSE}
      - PUBLIC_PORT=${PROVIDER_PORT}
      - BROKER_URL=${BROKER_URL}
      - DISABLE_SSL_VALIDATION=${DISABLE_SSL_VALIDATION}
      - CACHE_TOKEN=${CACHE_TOKEN}
      - FETCH_TOKEN_ON_STARTUP=${FETCH_TOKEN_ON_STARTUP}
      - SERVER_SSL_ENABLED=${SERVER_SSL_ENABLED}
      - KEYSTORE_NAME=${KEYSTORE_NAME}
      - KEY_PASSWORD=${KEY_PASSWORD}
      - KEYSTORE_PASSWORD=${KEYSTORE_PASSWORD}
      - ALIAS=${ALIAS}
      - DAPS_KEYSTORE_NAME=${DAPS_KEYSTORE_NAME}
      - DAPS_KEYSTORE_PASSWORD=${DAPS_KEYSTORE_PASSWORD}
      - DAPS_KEYSTORE_ALIAS=${DAPS_KEYSTORE_ALIAS}
      - TRUSTORE_NAME=${TRUSTORE_NAME}
      - TRUSTORE_PASSWORD=${TRUSTORE_PASSWORD}
      - TZ=Europe/Rome
    volumes:
      - ./ecc_resources_provider:/config
      - ./ecc_cert:/cert
    extra_hosts:
      - "connector-client-ecc:172.17.0.1"
    networks:
      - app-tier

  uc-dataapp-provider:
    image: rdlabengpa/ids_uc_data_app:v0.0.2
    environment:
      - TZ=Europe/Rome
    ports:
      - "9552:9555"
      - "8043:43"
    networks:
      - app-tier

  be-dataapp-provider:
    image: gitlab.alidalab.it:5000/alida/true-connector-data-app/musketeer:1.0.0
    environment:
      - "SPRING_PROFILES_ACTIVE=docker"
      - DATA_APP_MULTIPART=${PROVIDER_MULTIPART_EDGE}
      - SERVER_SSL_ENABLED=${SERVER_SSL_ENABLED}
      - KEYSTORE_NAME=${KEYSTORE_NAME}
      - KEY_PASSWORD=${KEY_PASSWORD}
      - KEYSTORE_PASSWORD=${KEYSTORE_PASSWORD}
      - ALIAS=${ALIAS}
      - TZ=Europe/Rome
    ports:
      - "8083:8083"
      - "9000:9000"
    volumes:
      - ./be-dataapp_resources:/config
      - ./be-dataapp_data_receiver:/data
      - ./ecc_cert:/cert
    networks:
      - app-tier

volumes:
  client_connector_data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./
  client_connector_logs:
  client_connector_results:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./
  client_connector_libraries:
  client_connector_configs:
  mongodb_data: